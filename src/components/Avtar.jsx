/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Jasmitsingh.glb 
*/

import React from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useFBX } from '@react-three/drei'
import { useAnimations } from '@react-three/drei'
import { useEffect,useRef } from 'react'
import { useControls } from 'leva'
import * as THREE from 'three'
export function Avtar(props) {
 const {animations}=props;
  const {headFollow,cursorFollow,wireFrame}=useControls({
    headFollow:false,
    cursorFollow:false
    ,
    wireFrame:false
  })
  const { scene } = useGLTF('models/Jasmitsingh.glb')
  const model=useRef();
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const {animations:typeinganimation}=useFBX('/animations/Typing.fbx');
  const {animations:standinganimation}=useFBX('/animations/Standing Idle.fbx');
  const {animations:fallinganimation}=useFBX('/animations/Falling Idle.fbx');
  const {animations:callinganimation}=useFBX('/animations/calling.fbx');

  typeinganimation[0].name="Typing";
  standinganimation[0].name="Standing";
  fallinganimation[0].name="Falling";
  callinganimation[0].name="Calling";
  
  // Create a custom waving animation
  const createWavingAnimation = () => {
    const wavingClip = standinganimation[0].clone();
    wavingClip.name = "Waving";
    
    // Create a simple waving motion by modifying the right arm
    const tracks = wavingClip.tracks;
    tracks.forEach(track => {
      if (track.name.includes("RightArm") && track.name.includes("rotation")) {
        const times = track.times;
        const values = track.values;
        
        // Add a gentle waving motion to the right arm
        for (let i = 0; i < times.length; i++) {
          const time = times[i];
          const waveOffset = Math.sin(time * 3) * 0.5; // Faster waving motion
          values[i * 4 + 0] += waveOffset; // X rotation for waving
        }
      }
    });
    
    return wavingClip;
  };
  
  const customWavingAnimation = createWavingAnimation();
  
  // Modify the animation to create a waving effect
  // We'll use the standing animation as base but modify it slightly
  const { actions }=useAnimations([typeinganimation[0],standinganimation[0],fallinganimation[0],customWavingAnimation,callinganimation[0]],model);
  useEffect(()=>{
   actions[animations].reset().play();
   return ()=>{
    actions[animations]?.reset().stop();
   }
  })
  useEffect(()=>{
    Object.values(materials).forEach((material)=>{
      material.wireframe=wireFrame;
    })
  },[wireFrame])
  useFrame((state) => {
    if(headFollow)
    {

      model.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if(cursorFollow)
    {
      const Target=new THREE.Vector3(state.mouse.x ,state.mouse.y,1);
      model.current.getObjectByName("Spine2").lookAt(Target);

    }
  });
  return (
    <group {...props} ref={model} dispose={null}>
       <group rotation-x={-Math.PI / 2}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Beard" geometry={nodes.Wolf3D_Beard.geometry} material={materials.Wolf3D_Beard} skeleton={nodes.Wolf3D_Beard.skeleton} morphTargetDictionary={nodes.Wolf3D_Beard.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Beard.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
   </group>
    </group>
  )
}

useGLTF.preload('models/Jasmitsingh.glb')
useFBX.preload('/animations/Typing.fbx')
useFBX.preload('/animations/Standing Idle.fbx')
useFBX.preload('/animations/Falling Idle.fbx')
useFBX.preload('/animations/calling.fbx')